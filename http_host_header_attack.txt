


- Misconfiguration and flawed business logic can expose websites to a variety of attacks via the HTTP Host header.



- If the input is not properly escaped or validated, the Host header is a potential vector for exploiting a range of other vulnerabilities like:-
    1. web cache poisoning
    2. business logic flaws in specific functionality
    3. routing-based ssrf
    4. classic server-side vulnerabilities, such as SQL injection.

- How do HTTP Host header vulnerabilities arise?
    - Due to the flawed assumption that the header is not user controllable.
    - not because of insecure coding but because of insecure configuartion of one or more component in the related infrastructure.

- Exploiting HTTP host header vulnerabilities:-
    - Suppying an arbitrary host header
    - check for flawed validation
    - send ambiguous request
    - inject duplicate host header
    - supply an absolute URL
    - add line wrapping
    - inject host override headers
    


other/labs:-
    - password reset poisoning
    - web cache poisoning
    - exploiting classic server-side vulnerabilities
    - bypassing authentication
    - virutal host brute-forcing
    - routing-based ssrf


=====================================================================================================
How to prevent HTTP HOst head attacks
====================================================================================================
    - Protect abosolute URLs
    - Validate the host header
    - Don't support host override header
        - X-Forwarded-Host
    - Whitelist permitted domains
    - Be careful with internal-only virutal hosts
